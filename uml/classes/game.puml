@startuml Game

enum MapDifficulty {
    Easy, Medium, Hard, Custom
}

class MapTile {
    + X : int <<get>>
    + Y : int <<get>>
    + Map : GameMap <<get>>
    + HasMine : bool <<get>> <<set>>
    + IsHidden : bool <<get>> <<set>>
    + Revealed : EventHandler

    + MapTile(map : GameMap, x : int, y : int, hasMine : bool = false)
    + GetNeighbours() : List<MapTile>
    + GetMineCount() : int
    + Reveal() : void
    # <<virtual>> OnRevealed(arg : EventArgs = null) : void
}

note left
    Reveal deckt Nachbarn ggf. rekursiv auf (siehe [[https://de.wikipedia.org/wiki/Minesweeper Regeln]]).
    Beachte das [[http://www.java2s.com/Tutorials/CSharp/Custom_Types/Event/C_Standard_Event_Pattern.htm C# Standart Event Pattern]].
end note

class GameMap {
    + RevealedMines : int <<get>> <<private set>>
    + ElapsedTime : TimeSpan <<get>> <<set>>
    + Tiles : MapTile[][] <<get>>
    + TotalTiles : int <<get>>
    + TotalMines : int <<get>>
    + Density : int <<get>>
    + Width : int <<get>>
    + Height : int <<get>>

    + GameMap(x : int, y : int, d : int)
    + Init() : void
    + ShuffleMines() : void
    + RevealTile(x : int, y : int) : bool
}

note left: RevealTile gibt true zurück wenn eine Mine aufgedeckt wurde.

GameMap --> "*" MapTile
MapTile --> "1" GameMap

newpage

enum WindowMode {
    Windowed, Fullscreen
}

class GameSettings {
    + WindowMode : WindowMode <<get>> <<set>>
    + Difficulty : MapDifficulty <<get>>
    + MineDensity : int <<get>>
    + MapWidth : int <<get>>
    + MapHeight : int <<get>>
    + AudioVolume : int <<get>>
    + MusicVolume : int <<get>>

    + GameSettings(dif : MapDifficulty, w : int, h : int, d : int, av : int, mv : int, wm : WindowMode = 0)
    + Equals(obj : object) : bool
    + GetHashCode() : int
}

class Highscore {
    + Name : string <<get>> <<set>>
    + MinesHit : int <<get>>
    + TotalMines : int <<get>>
    + Time : TimeSpan <<get>>
    + TimeStamp : DateTime <<get>>
    + Settings : GameSettings <<get>>

    + Highscore(name : string, minesHit : int, totalMines : int, time : TimeSpan, settings : GameSettings)
    + CompareTo(score : Highscore) : int
    + Equals(obj : object) : bool
    + GetHashCode() : int

    + {static} operator>(score1 : Highscore, score2 : Highscore) : bool
    + {static} operator<(score1 : Highscore, score2 : Highscore) : bool
    + {static} operator>(score1 : Highscore, score2 : Highscore) : bool
    + {static} operator<(score1 : Highscore, score2 : Highscore) : bool
}

note left
    Die Klasse überschreibt bzw. implementiert Equals, GetHashCode und CompareTo
    um die Verwaltung in einem [[https://docs.microsoft.com/de-de/dotnet/api/system.collections.generic.sortedset-1?view=netframework-4.8 SortedSet]] zu ermöglichen.
    Das Überladen der Vergleichsoperatoren ist optional.
end note

IComparable <|.. Highscore
Highscore -right-> "1" GameSettings
GameSettings --() Serializabe
Highscore --() Serializable

note left: Infos zu [[https://docs.microsoft.com/de-de/dotnet/standard/serialization/basic-serialization Serializable in C#]].

@enduml